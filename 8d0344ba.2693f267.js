(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{109:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return i})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return d}));var a=n(1),l=(n(0),n(121)),o=n(132),r=n.n(o);const s={id:"getting-started",title:"Getting Started"},i={id:"getting-started",title:"Getting Started",description:"\x3c!-- MDX Magic: Used below to render ANSI code blocks --\x3e",source:"@site/../docs/getting-started.md",permalink:"/docs/getting-started",sidebar:"docs",previous:{title:"Native Reason Basics",permalink:"/docs/native-basics"},next:{title:"Rely Introduction",permalink:"/docs/rely/introduction"}},c=[{value:"Install Esy",id:"install-esy",children:[]},{value:"Create a fresh project",id:"create-a-fresh-project",children:[]},{value:"Run your first app",id:"run-your-first-app",children:[{value:"Pastel",id:"pastel",children:[]},{value:"Console",id:"console",children:[]}]}],b={rightToc:c},p="wrapper";function d({components:e,...t}){return Object(l.b)(p,Object(a.a)({},b,t,{components:e,mdxType:"MDXLayout"}),Object(l.b)("h2",{id:"install-esy"},"Install Esy"),Object(l.b)("p",null,"We recommend using ",Object(l.b)("a",Object(a.a)({parentName:"p"},{href:"https://esy.sh"}),"Esy")," as your package manager in native Reason projects. Esy is a native, npm-esque package manager with built-in dependency isolation and fast, incremental builds."),Object(l.b)("p",null,"The easiest way to install ",Object(l.b)("strong",{parentName:"p"},"Esy")," is with ",Object(l.b)("a",Object(a.a)({parentName:"p"},{href:"https://nodejs.org"}),"npm"),":"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"npm install -g esy\n")),Object(l.b)("h2",{id:"create-a-fresh-project"},"Create a fresh project"),Object(l.b)("p",null,"First, clone a copy of the ",Object(l.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/esy-ocaml/hello-reason.git"}),Object(l.b)("inlineCode",{parentName:"a"},"esy-ocaml/hello-reason"))," project:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"git clone https://github.com/esy-ocaml/hello-reason.git\ncd hello-reason\n")),Object(l.b)("p",null,"Then, run ",Object(l.b)("inlineCode",{parentName:"p"},"esy")," to install relevant dependencies and build your app:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"esy\n")),Object(l.b)("h2",{id:"run-your-first-app"},"Run your first app"),Object(l.b)("p",null,"Run"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"esy x Hello.exe # runs Hello.exe\n")),Object(l.b)("p",null,"If everything went as expected, you should see the following output:"),Object(l.b)(r.a,{mdxType:"Ansi"},"Running Test Program: \x1b[31mHello\x1b[39m, \x1b[32mWorld\x1b[39m!"),Object(l.b)("p",null,"Believe it or not, you're already using two Reason Native packages!"),Object(l.b)("h3",{id:"pastel"},"Pastel"),Object(l.b)("p",null,"Open up ",Object(l.b)("inlineCode",{parentName:"p"},"lib/Util.re")," and you might see something interesting:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-reason"}),'/* lib/Util.re */\nlet hello = () =>\n  Pastel.(\n    <Pastel>\n      <Pastel color=Red> "Hello" </Pastel>\n      ", "\n      <Pastel color=Green> "World" </Pastel>\n      "!"\n    </Pastel>\n  );\n')),Object(l.b)("p",null,Object(l.b)("a",Object(a.a)({parentName:"p"},{href:"./pastel/index.md"}),"Pastel")," is a React-like text formatting library for the terminal; one of its core features is the ability to format console text with ",Object(l.b)("a",Object(a.a)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/ANSI_escape_code#Colors"}),"ANSI Escape Codes"),"."),Object(l.b)("p",null,"Let's try making ",Object(l.b)("inlineCode",{parentName:"p"},"Hello")," yellow:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-reason"}),'/* lib/Util.re */\n/* ... */\n    <Pastel>\n      <Pastel color=Yellow> "Hello" </Pastel>\n      ", "\n/* ... */\n')),Object(l.b)("p",null,"Run ",Object(l.b)("inlineCode",{parentName:"p"},"esy build")," to rebuild your app, and run ",Object(l.b)("inlineCode",{parentName:"p"},"esy x Hello.exe")," to see your changes:"),Object(l.b)(r.a,{mdxType:"Ansi"},"Running Test Program: \x1b[33mHello\x1b[39m, \x1b[32mWorld\x1b[39m!"),Object(l.b)("h3",{id:"console"},"Console"),Object(l.b)("p",null,"Similarly, let's take a look at ",Object(l.b)("inlineCode",{parentName:"p"},"bin/Hello.re"),":"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-reason"}),'/* bin/Hello.re */\nConsole.log("Running Test Program:");\nlet () = print_endline(Lib.Util.hello());\n')),Object(l.b)("p",null,"The ",Object(l.b)("a",Object(a.a)({parentName:"p"},{href:"console/index.md"}),"Console")," package allows you to log nearly anything without having to define any printers. Let's try logging a nested tuple:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-reason"}),"/* bin/Hello.re */\nConsole.log((1, (2, 3)));\nlet () = print_endline(Lib.Util.hello());\n")),Object(l.b)("p",null,"Running ",Object(l.b)("inlineCode",{parentName:"p"},"esy build && esy x Hello.exe")," should produce the following:"),Object(l.b)(r.a,{mdxType:"Ansi"},"\x1b[33mHello\x1b[39m, \x1b[32mWorld\x1b[39m!"))}d.isMDXComponent=!0}}]);