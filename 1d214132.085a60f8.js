(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{122:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return O}));var a=n(0),r=n.n(a);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=r.a.createContext({}),p=function(e){var t=r.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i({},t,{},e)),n},u=function(e){var t=p(e.components);return r.a.createElement(s.Provider,{value:t},e.children)},b="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,o=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),u=p(n),b=a,m=u["".concat(o,".").concat(b)]||u[b]||d[b]||l;return n?r.a.createElement(m,i({ref:t},s,{components:n})):r.a.createElement(m,i({ref:t},s))}));function O(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,o=new Array(l);o[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[b]="string"==typeof e?e:a,o[1]=i;for(var s=2;s<l;s++)o[s]=n[s];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},95:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return i})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return u}));var a=n(1),r=n(6),l=(n(0),n(122)),o={id:"quickstart",title:"Pastel Quickstart",sidebar_label:"Quickstart"},i={id:"pastel/quickstart",title:"Pastel Quickstart",description:"> This quickstart builds off [Getting Started](../getting-started) and assumes you have a native Reason project set up.",source:"@site/../docs/pastel/quickstart.md",permalink:"/reason-native/docs/pastel/quickstart",sidebar_label:"Quickstart",sidebar:"docs",previous:{title:"Pastel Introduction",permalink:"/reason-native/docs/pastel/introduction"},next:{title:"Pastel API",permalink:"/reason-native/docs/pastel/api"}},c=[{value:"Install Pastel",id:"install-pastel",children:[]},{value:"Sample Code",id:"sample-code",children:[]}],s={rightToc:c},p="wrapper";function u(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(l.b)(p,Object(a.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(l.b)("blockquote",null,Object(l.b)("p",{parentName:"blockquote"},"This quickstart builds off ",Object(l.b)("a",Object(a.a)({parentName:"p"},{href:"../getting-started"}),"Getting Started")," and assumes you have a native Reason project set up.")),Object(l.b)("h2",{id:"install-pastel"},"Install Pastel"),Object(l.b)("p",null,"To install Pastel in your project with esy, run"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"esy add @reason-native/pastel\n")),Object(l.b)("p",null,"This will add ",Object(l.b)("inlineCode",{parentName:"p"},"@reason-native/pastel")," into your ",Object(l.b)("inlineCode",{parentName:"p"},"package.json"),"."),Object(l.b)("p",null,"In order to use Pastel, you must add it to your build system. With dune, ",Object(l.b)("inlineCode",{parentName:"p"},"pastel.lib")," must be added to ",Object(l.b)("a",Object(a.a)({parentName:"p"},{href:"https://jbuilder.readthedocs.io/en/latest/dune-files.html#library-dependencies"}),"the relevant ",Object(l.b)("inlineCode",{parentName:"a"},"dune")," file"),":"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-lisp"}),"(libraries ... pastel.lib)\n")),Object(l.b)("h2",{id:"sample-code"},"Sample Code"),Object(l.b)("p",null,"Pastel is fundamentally a ",Object(l.b)("a",Object(a.a)({parentName:"p"},{href:"https://reasonml.github.io/docs/en/jsx"}),"Reason JSX element")," that wraps text in ANSI-compatible formatting. You can specify attributes such as ",Object(l.b)("inlineCode",{parentName:"p"},"bold"),", ",Object(l.b)("inlineCode",{parentName:"p"},"underline"),", and ",Object(l.b)("inlineCode",{parentName:"p"},"color")," to format terminal output. Wrap your pastel elements with ",Object(l.b)("inlineCode",{parentName:"p"},"Pastel.()")," to convert it to a string:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-reason"}),'let output =\n  Pastel.(\n    <Pastel bold=true color=Green>\n      "Hello "\n      <Pastel italic=true underline=true> "World" </Pastel>\n    </Pastel>\n  );\nprint_endline(output);\n')),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash-ansi"}),"\x1b[32m\x1b[1mHello \x1b[22m\x1b[39m\x1b[32m\x1b[1m\x1b[3m\x1b[4mWorld\x1b[24m\x1b[23m\x1b[22m\x1b[39m\n")))}u.isMDXComponent=!0}}]);