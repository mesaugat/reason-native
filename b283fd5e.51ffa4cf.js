(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{112:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return a})),t.d(n,"metadata",(function(){return u})),t.d(n,"rightToc",(function(){return c})),t.d(n,"default",(function(){return p}));var r=t(1),o=t(6),i=(t(0),t(122)),a={id:"advanced",title:"Advanced Topics - Rely",sidebar_label:"Advanced"},u={id:"rely/advanced",title:"Advanced Topics - Rely",description:"## Running with [Custom Run Config](https://github.com/facebookexperimental/reason-native/blob/master/src/rely/RunConfig.re)",source:"@site/../docs/rely/advanced.md",permalink:"/reason-native/docs/rely/advanced",sidebar_label:"Advanced",sidebar:"docs",previous:{title:"Expect",permalink:"/reason-native/docs/rely/expect"},next:{title:"Console: No effort, universal logger",permalink:"/reason-native/docs/console/introduction"}},c=[{value:"Running with Custom Run Config",id:"running-with-custom-run-config",children:[]},{value:"Running with Custom Reporters",id:"running-with-custom-reporters",children:[]},{value:"Running in continuous integration environments",id:"running-in-continuous-integration-environments",children:[]}],l={rightToc:c},s="wrapper";function p(e){var n=e.components,t=Object(o.a)(e,["components"]);return Object(i.b)(s,Object(r.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"running-with-custom-run-config"},"Running with ",Object(i.b)("a",Object(r.a)({parentName:"h2"},{href:"https://github.com/facebookexperimental/reason-native/blob/master/src/rely/RunConfig.re"}),"Custom Run Config")),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-reason"}),"let sampleRunConfig = Rely.RunConfig.initialize()\nTestFramework.run(sampleRunConfig);\n")),Object(i.b)("h2",{id:"running-with-custom-reporters"},"Running with ",Object(i.b)("a",Object(r.a)({parentName:"h2"},{href:"https://github.com/facebookexperimental/reason-native/blob/master/src/rely/reporters/Reporter.re"}),"Custom Reporters")),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-reason"}),"let myReporter: Rely.Reporter.t = {\n  onTestSuiteStart: (testSuite) => {...},\n  onTestSuiteResult: (testSuite, aggregatedResult, testSuiteResult) => {...},\n  onRunStart: (relyRunInfo) => {...},\n  onRunComplete: (aggregatedResult) => {...}\n};\n\nlet customReporterConfig = Rely.RunConfig.initialize() |> withReporters([\n  Custom(myReporter),\n  /* not required, but the default terminal reporter can also be included */\n  Default\n]);\n\nTestFramework.run(customReporterConfig);\n")),Object(i.b)("h2",{id:"running-in-continuous-integration-environments"},"Running in continuous integration environments"),Object(i.b)("p",null,"It is recommended to use something like the following run configuration in CI"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-reason"}),'TestFramework.run(\n  Rely.RunConfig.(\n    initialize()\n    /* causes tests to fail if testOnly or describeOnly are used to prevent\n     * accidentally disabling all other tests (as of Rely 2.1.0) */\n    |> ciMode(true)\n    |> withReporters([\n         /* the Default reporter prints terminal output, the jUnit reporter\n          * outputs junit xml to the provided filepath, most CI solutions have\n          * integration with the junit xml format */\n         Default,\n         JUnit("./junit.xml"),\n       ])\n  ),\n);\n')))}p.isMDXComponent=!0},122:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return d}));var r=t(0),o=t.n(r);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function u(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=o.a.createContext({}),s=function(e){var n=o.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):u({},n,{},e)),t},p=function(e){var n=s(e.components);return o.a.createElement(l.Provider,{value:n},e.children)},m="mdxType",f={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},b=Object(r.forwardRef)((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,a=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),p=s(t),m=r,b=p["".concat(a,".").concat(m)]||p[m]||f[m]||i;return t?o.a.createElement(b,u({ref:n},l,{components:t})):o.a.createElement(b,u({ref:n},l))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,a=new Array(i);a[0]=b;var u={};for(var c in n)hasOwnProperty.call(n,c)&&(u[c]=n[c]);u.originalType=e,u[m]="string"==typeof e?e:r,a[1]=u;for(var l=2;l<i;l++)a[l]=t[l];return o.a.createElement.apply(null,a)}return o.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"}}]);