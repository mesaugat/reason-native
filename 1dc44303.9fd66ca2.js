(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{121:function(e,n,t){"use strict";t.d(n,"a",(function(){return u})),t.d(n,"b",(function(){return m}));var o=t(0),r=t.n(o);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=r.a.createContext({}),p=function(e){var n=r.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l({},n,{},e)),t},u=function(e){var n=p(e.components);return r.a.createElement(s.Provider,{value:n},e.children)},b="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},g=Object(o.forwardRef)((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),u=p(t),b=o,g=u["".concat(i,".").concat(b)]||u[b]||d[b]||a;return t?r.a.createElement(g,l({ref:n},s,{components:t})):r.a.createElement(g,l({ref:n},s))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=g;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l[b]="string"==typeof e?e:o,i[1]=l;for(var s=2;s<a;s++)i[s]=t[s];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,t)}g.displayName="MDXCreateElement"},95:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return a})),t.d(n,"metadata",(function(){return i})),t.d(n,"rightToc",(function(){return l})),t.d(n,"default",(function(){return p}));var o=t(1),r=(t(0),t(121));const a={id:"api",title:"Console API"},i={id:"console/api",title:"Console API",description:"## `Console.log(anything)`",source:"@site/../docs/console/api.md",permalink:"/reason-native/docs/console/api",sidebar:"docs",previous:{title:"Console Quickstart",permalink:"/reason-native/docs/console/quickstart"},next:{title:"Pastel Introduction",permalink:"/reason-native/docs/pastel/introduction"}},l=[{value:"<code>Console.log(anything)</code>",id:"consoleloganything",children:[]},{value:"<code>Console.out(anything)</code>",id:"consoleoutanything",children:[]},{value:"<code>Console.debug(anything)</code>",id:"consoledebuganything",children:[]},{value:"<code>Console.error(anything)</code>",id:"consoleerroranything",children:[]},{value:"<code>Console.warn(anything)</code>",id:"consolewarnanything",children:[]}],c={rightToc:l},s="wrapper";function p({components:e,...n}){return Object(r.b)(s,Object(o.a)({},c,n,{components:e,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"consoleloganything"},Object(r.b)("inlineCode",{parentName:"h2"},"Console.log(anything)")),Object(r.b)("p",null,"Output a string or object to standard output followed by a newline. Suitable\nfor writing to logs, or for outputting user messaging in command line\napplications. If you pass a string, it will not be wrapped in quotes. If you\npass an object, ",Object(r.b)("inlineCode",{parentName:"p"},"Console.log")," will attempt to print the object dynamically.\nStrings deep in objects will be wrapped in quotes."),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-reason"}),"let log: 'a => unit;\n")),Object(r.b)("h2",{id:"consoleoutanything"},Object(r.b)("inlineCode",{parentName:"h2"},"Console.out(anything)")),Object(r.b)("p",null,"Same as ",Object(r.b)("inlineCode",{parentName:"p"},"Console.log")," but attempts to avoid printing a final newline. Not all\nbackends will support omitting the newline (such as in the browser where\n",Object(r.b)("inlineCode",{parentName:"p"},"console")," only supports outputting with final newlines.)"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-reason"}),"let out: 'a => unit;\n")),Object(r.b)("h2",{id:"consoledebuganything"},Object(r.b)("inlineCode",{parentName:"h2"},"Console.debug(anything)")),Object(r.b)("p",null,"Same as ",Object(r.b)("inlineCode",{parentName:"p"},"Console.log")," but used for developer-facing messaging to standard out.\nSuitable for writing to log files. In production mode, would typically be\nsuppressed entirely. Custom ",Object(r.b)("inlineCode",{parentName:"p"},"Console.t")," implementations may implement custom\nbehavior for ",Object(r.b)("inlineCode",{parentName:"p"},"Console.debug")," that behaves differently from ",Object(r.b)("inlineCode",{parentName:"p"},"Console.log"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-reason"}),"let debug: 'a => unit;\n")),Object(r.b)("h2",{id:"consoleerroranything"},Object(r.b)("inlineCode",{parentName:"h2"},"Console.error(anything)")),Object(r.b)("p",null,"Same as ",Object(r.b)("inlineCode",{parentName:"p"},"Console.log")," but writes to ",Object(r.b)("inlineCode",{parentName:"p"},"stderr"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-reason"}),"let error: 'a => unit;\n")),Object(r.b)("h2",{id:"consolewarnanything"},Object(r.b)("inlineCode",{parentName:"h2"},"Console.warn(anything)")),Object(r.b)("p",null,"Currently the same as ",Object(r.b)("inlineCode",{parentName:"p"},"Console.error"),' but will eventually be able to be\nsuppressed via a "log level".'),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-reason"}),"let warn: 'a => unit;\n")))}p.isMDXComponent=!0}}]);